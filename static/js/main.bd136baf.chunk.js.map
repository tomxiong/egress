{"version":3,"sources":["SpeakerLayout.module.css","GridLayout.tsx","useDominateSpeaker.ts","SingleSpeakerLayout.tsx","SpeakerLayout.tsx","Room.tsx","App.tsx","index.tsx","GridLayout.module.css"],"names":["module","exports","GridLayout","participants","room","React","useState","visibleParticipants","setVisibleParticipants","styles","grid1x1","gridClass","setGridClass","useEffect","numVisible","length","grid2x1","grid2x2","grid3x3","grid4x4","grid5x5","Math","min","newParticipants","forEach","p","has","sid","localParticipant","push","activeSpeakers","speaker","includes","idx","findIndex","isSpeaking","splice","className","stage","map","participant","orientation","width","height","speakerClassName","identity","useDominateSpeaker","dominantSpeaker","setDominateSpeaker","lastSpokeAt","Date","now","getTime","newDominateSpeaker","undefined","audioLevel","SingleSpeakerLayout","screenTrack","pub","getTrack","Track","Source","ScreenShare","isSubscribed","videoTrack","track","mainParticipant","SpeakerLayout","otherParticipants","mainView","filter","stageCenter","stageSidebar","aspectWidth","aspectHeight","RoomPage","url","token","initialLayout","layout","setLayout","roomState","useRoom","adaptiveStream","audioTracks","connect","EgressHelper","setRoom","autoEnd","onLayoutChanged","newLayout","startRecording","remoteParticipants","RemoteParticipant","Stage","hasScreenShare","setHasScreenShare","onTrackChanged","useCallback","foundScreenshare","isScreenShareEnabled","on","RoomEvent","TrackPublished","TrackUnpublished","ConnectionStateChanged","off","interfaceStyle","endsWith","containerClass","main","startsWith","replace","isLocal","App","getLiveKitURL","getAccessToken","getLayout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd136baf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stage\":\"SpeakerLayout_stage__25205\",\"stageCenter\":\"SpeakerLayout_stageCenter__2UqBp\",\"stageSidebar\":\"SpeakerLayout_stageSidebar__WeIBE\"};","import { ParticipantView } from '@livekit/react-components';\nimport { Participant } from 'livekit-client';\nimport React, { useEffect } from 'react';\nimport {\n  LayoutProps,\n} from './common';\nimport styles from './GridLayout.module.css';\n\nconst GridLayout = ({ participants, room }: LayoutProps) => {\n  const [visibleParticipants, setVisibleParticipants] = React.useState<Participant[]>([]);\n  const [gridClass, setGridClass] = React.useState(styles.grid1x1);\n\n  // select participants to display on first page, keeping ordering consistent if possible.\n  useEffect(() => {\n    let numVisible = participants.length;\n    if (participants.length === 1) {\n      setGridClass(styles.grid1x1);\n    } else if (participants.length === 2) {\n      setGridClass(styles.grid2x1);\n    } else if (participants.length <= 4) {\n      setGridClass(styles.grid2x2);\n    } else if (participants.length <= 9) {\n      setGridClass(styles.grid3x3);\n    } else if (participants.length <= 16) {\n      setGridClass(styles.grid4x4);\n    } else {\n      setGridClass(styles.grid5x5);\n      numVisible = Math.min(numVisible, 25);\n    }\n\n    // remove any participants that are no longer connected\n    const newParticipants: Participant[] = [];\n    visibleParticipants.forEach((p) => {\n      if (\n        room?.participants.has(p.sid)\n        || room?.localParticipant.sid === p.sid\n      ) {\n        newParticipants.push(p);\n      }\n    });\n\n    // ensure active speakers are all visible\n    room?.activeSpeakers?.forEach((speaker) => {\n      if (\n        newParticipants.includes(speaker)\n        || (speaker !== room?.localParticipant\n          && !room?.participants.has(speaker.sid))\n      ) {\n        return;\n      }\n      // find a non-active speaker and switch\n      const idx = newParticipants.findIndex((p) => !p.isSpeaking);\n      if (idx >= 0) {\n        newParticipants[idx] = speaker;\n      } else {\n        newParticipants.push(speaker);\n      }\n    });\n\n    // add other non speakers\n    for (const p of participants) {\n      if (newParticipants.length >= numVisible) {\n        break;\n      }\n      if (newParticipants.includes(p) || p.isSpeaking) {\n        continue;\n      }\n      newParticipants.push(p);\n    }\n\n    if (newParticipants.length > numVisible) {\n      newParticipants.splice(numVisible, newParticipants.length - numVisible);\n    }\n    setVisibleParticipants(newParticipants);\n  }, [participants]);\n\n  if (visibleParticipants.length === 0) {\n    return <div />;\n  }\n\n  return (\n    <div className={`${styles.stage} ${gridClass}`}>\n      {visibleParticipants.map((participant) => (\n        <ParticipantView\n          key={participant.identity}\n          participant={participant}\n          orientation=\"landscape\"\n          width=\"100%\"\n          height=\"100%\"\n          speakerClassName=\"\"\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default GridLayout;\n","import { Participant } from 'livekit-client';\nimport { useEffect, useState } from 'react';\n\nexport default function useDominateSpeaker(participants: Participant[]): Participant | undefined {\n  const [dominantSpeaker, setDominateSpeaker] = useState<Participant>();\n\n  useEffect(() => {\n    if (dominantSpeaker) {\n      if (dominantSpeaker.isSpeaking) {\n        // no changes as long as current speaker is still speaking\n        return;\n      } if (dominantSpeaker.lastSpokeAt\n        && Date.now() - dominantSpeaker.lastSpokeAt.getTime() < 3000) {\n        // don't switch immediately within grace period\n        return;\n      }\n    }\n    let newDominateSpeaker: Participant | undefined = dominantSpeaker;\n    for (const p of participants) {\n      if (p.isSpeaking) {\n        if (newDominateSpeaker === undefined || p.audioLevel > newDominateSpeaker.audioLevel) {\n          newDominateSpeaker = p;\n        }\n      }\n    }\n    if (newDominateSpeaker !== dominantSpeaker) {\n      setDominateSpeaker(newDominateSpeaker);\n    }\n  }, [participants]);\n\n  return dominantSpeaker;\n}\n","import { ParticipantView, ScreenShareView } from '@livekit/react-components';\nimport { RemoteVideoTrack, Track } from 'livekit-client';\nimport { LayoutProps } from './common';\nimport useDominateSpeaker from './useDominateSpeaker';\n\nconst SingleSpeakerLayout = ({ participants }: LayoutProps) => {\n  const dominantSpeaker = useDominateSpeaker(participants);\n\n  // find first participant with screen shared\n  let screenTrack: RemoteVideoTrack | undefined;\n  participants.forEach((p) => {\n    const pub = p.getTrack(Track.Source.ScreenShare);\n    if (pub && pub.isSubscribed) {\n      screenTrack = pub.videoTrack as RemoteVideoTrack;\n    }\n  });\n\n  if (participants.length === 0) {\n    return <div />;\n  }\n\n  if (screenTrack) {\n    return <ScreenShareView track={screenTrack} height=\"100%\" width=\"100%\" />;\n  }\n  const mainParticipant = dominantSpeaker ?? participants[0];\n  return (\n    <ParticipantView\n      key={mainParticipant.identity}\n      participant={mainParticipant}\n      width=\"100%\"\n      height=\"100%\"\n      orientation=\"landscape\"\n      speakerClassName=\"\"\n    />\n  );\n};\n\nexport default SingleSpeakerLayout;\n","import { ParticipantView, ScreenShareView } from '@livekit/react-components';\nimport {\n  Participant, RemoteVideoTrack, Track,\n} from 'livekit-client';\nimport { ReactElement } from 'react';\nimport { LayoutProps } from './common';\nimport styles from './SpeakerLayout.module.css';\nimport useDominateSpeaker from './useDominateSpeaker';\n\nconst SpeakerLayout = ({ participants }: LayoutProps) => {\n  const dominantSpeaker = useDominateSpeaker(participants);\n\n  // find first participant with screen shared\n  let screenTrack: RemoteVideoTrack | undefined;\n  participants.forEach((p) => {\n    const pub = p.getTrack(Track.Source.ScreenShare);\n    if (pub && pub.isSubscribed) {\n      screenTrack = pub.videoTrack as RemoteVideoTrack;\n    }\n  });\n\n  if (participants.length === 0) {\n    return <div />;\n  }\n\n  // full screen a single participant\n  if (participants.length === 1 && !screenTrack) {\n    return (\n      <>\n        <ParticipantView\n          participant={participants[0]}\n          width=\"100%\"\n          height=\"100%\"\n          orientation=\"landscape\"\n          speakerClassName=\"\"\n        />\n      </>\n    );\n  }\n\n  let otherParticipants: Participant[];\n  let mainView: ReactElement;\n  if (screenTrack) {\n    otherParticipants = participants;\n    mainView = (\n      <ScreenShareView track={screenTrack} height=\"100%\" width=\"100%\" />\n    );\n  } else {\n    const mainParticipant = dominantSpeaker ?? participants[0];\n    otherParticipants = participants.filter((p) => p !== mainParticipant);\n    mainView = (\n      <ParticipantView\n        key={mainParticipant.identity}\n        participant={mainParticipant}\n        width=\"100%\"\n        height=\"100%\"\n        orientation=\"landscape\"\n        speakerClassName=\"\"\n      />\n    );\n  }\n\n  return (\n    <div className={styles.stage}>\n      <div className={styles.stageCenter}>{mainView}</div>\n      <div className={styles.stageSidebar}>\n        {otherParticipants.map((participant) => (\n          <ParticipantView\n            key={participant.identity}\n            participant={participant}\n            width=\"100%\"\n            height=\"100%\"\n            aspectWidth={16}\n            aspectHeight={9}\n            orientation=\"landscape\"\n            speakerClassName=\"\"\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SpeakerLayout;\n","import EgressHelper from '@livekit/egress-sdk';\nimport { AudioRenderer, useRoom } from '@livekit/react-components';\nimport {\n  AudioTrack, Participant, RemoteParticipant, Room, RoomEvent,\n} from 'livekit-client';\nimport {\n  ReactElement, useCallback, useEffect, useState,\n} from 'react';\nimport GridLayout from './GridLayout';\nimport SingleSpeakerLayout from './SingleSpeakerLayout';\nimport SpeakerLayout from './SpeakerLayout';\n\ninterface RoomPageProps {\n  url: string;\n  token: string;\n  layout: string;\n}\n\nexport default function RoomPage({ url, token, layout: initialLayout }: RoomPageProps) {\n  const [layout, setLayout] = useState(initialLayout);\n  const roomState = useRoom({\n    adaptiveStream: true,\n  });\n  const { room, participants, audioTracks } = roomState;\n\n  useEffect(() => {\n    roomState.connect(url, token);\n  }, [url]);\n\n  useEffect(() => {\n    if (room) {\n      EgressHelper.setRoom(room, {\n        autoEnd: true,\n      });\n      // Egress layout can change on the fly, we can react to the new layout\n      // here.\n      EgressHelper.onLayoutChanged((newLayout) => {\n        setLayout(newLayout);\n      });\n\n      // start recording immediately after connection\n      EgressHelper.startRecording();\n    }\n  }, [room]);\n\n  if (!url || !token) {\n    return <div className=\"error\">missing required params url and token</div>;\n  }\n\n  // not ready yet, don't render anything\n  if (!room) {\n    return <div />;\n  }\n\n  // filter out local participant\n  const remoteParticipants = participants.filter((p) => p instanceof RemoteParticipant);\n\n  return (\n    <Stage\n      layout={layout}\n      room={room}\n      participants={remoteParticipants}\n      audioTracks={audioTracks}\n    />\n  );\n}\n\ninterface StageProps {\n  layout: string;\n  room: Room;\n  participants: Participant[];\n  audioTracks: AudioTrack[];\n}\n\nfunction Stage({\n  layout, room, participants, audioTracks,\n}: StageProps) {\n  const [hasScreenShare, setHasScreenShare] = useState(false);\n\n  const onTrackChanged = useCallback(() => {\n    let foundScreenshare = false;\n    room.participants.forEach((p) => {\n      if (p.isScreenShareEnabled) {\n        foundScreenshare = true;\n      }\n    });\n    setHasScreenShare(foundScreenshare);\n  }, [room]);\n\n  useEffect(() => {\n    if (!room) {\n      return;\n    }\n    room.on(RoomEvent.TrackPublished, onTrackChanged);\n    room.on(RoomEvent.TrackUnpublished, onTrackChanged);\n    room.on(RoomEvent.ConnectionStateChanged, onTrackChanged);\n    return () => {\n      room.off(RoomEvent.TrackPublished, onTrackChanged);\n      room.off(RoomEvent.TrackUnpublished, onTrackChanged);\n      room.off(RoomEvent.ConnectionStateChanged, onTrackChanged);\n    };\n  }, [room]);\n\n  let interfaceStyle = 'dark';\n  if (layout.endsWith('-light')) {\n    interfaceStyle = 'light';\n  }\n\n  let containerClass = 'roomContainer';\n  if (interfaceStyle) {\n    containerClass += ` ${interfaceStyle}`;\n  }\n\n  // determine layout to use\n  let main: ReactElement = <></>;\n  if (hasScreenShare && layout.startsWith('grid')) {\n    layout = layout.replace('grid', 'speaker');\n  }\n  if (layout.startsWith('speaker')) {\n    main = (\n      <SpeakerLayout\n        room={room}\n        participants={participants}\n      />\n    );\n  } else if (layout.startsWith('single-speaker')) {\n    main = (\n      <SingleSpeakerLayout\n        room={room}\n        participants={participants}\n      />\n    );\n  } else if (layout.startsWith('grid')) {\n    main = (\n      <GridLayout\n        room={room}\n        participants={participants}\n      />\n    );\n  }\n\n  return (\n    <div className={containerClass}>\n      {main}\n      {audioTracks.map((track) => (\n        <AudioRenderer key={track.sid} track={track} isLocal={false} />\n      ))}\n    </div>\n  );\n}\n","import EgressHelper from '@livekit/egress-sdk';\nimport '@livekit/react-components/dist/index.css';\nimport React from 'react';\nimport 'react-aspect-ratio/aspect-ratio.css';\nimport './App.css';\nimport RoomPage from './Room';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <RoomPage\n        // EgressHelper retrieves parameters passed to the page\n        url={EgressHelper.getLiveKitURL()}\n        token={EgressHelper.getAccessToken()}\n        layout={EgressHelper.getLayout()}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stage\":\"GridLayout_stage__30DlR\",\"grid1x1\":\"GridLayout_grid1x1__3aEAn\",\"grid2x1\":\"GridLayout_grid2x1__2Ba_1\",\"grid2x2\":\"GridLayout_grid2x2__2f_nY\",\"grid3x3\":\"GridLayout_grid3x3__170FX\",\"grid4x4\":\"GridLayout_grid4x4__2G9kX\",\"grid5x5\":\"GridLayout_grid5x5__Iw6qK\"};"],"sourceRoot":""}